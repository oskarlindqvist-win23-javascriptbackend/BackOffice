@page "/create-course"
@using Microsoft.AspNetCore.Authorization
@attribute [StreamRendering]

@inject GraphQLService GraphQLService
@inject NavigationManager NavigationManager
@attribute [Authorize]

@rendermode InteractiveServer

<PageTitle>Create Course</PageTitle>

<h3>Create Course</h3>

@if (!string.IsNullOrEmpty(SuccessMessage))
{
    <div id="form-success" class="alert alert-success" role="alert">
        @SuccessMessage
    </div>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div id="form-error" class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

<EditForm Model="course" FormName="CourseForm" OnValidSubmit="HandleValidSubmit">
@*     <DataAnnotationsValidator />
    <ValidationSummary /> *@

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="course.Title" placeholder="Enter course Title" />
    </div>

    <div class="mb-3">
        <label for="imageUri" class="form-label">Course Image small</label>
        <InputText id="imageUri" class="form-control" @bind-Value="course.ImageUri" placeholder="Enter course image url" />
    </div>

    <div class="mb-3">
        <label for="imageHeaderUri" class="form-label">Course Image big</label>
        <InputText id="imageHeaderUri" class="form-control" @bind-Value="course.ImageHeaderUri" placeholder="Enter course image url for course details" />
    </div>

    <div class="mb-3">
        <label for="isDigital" class="form-label">Is Digital</label>
        <InputCheckbox id="isDigital" class="form-check-input" @bind-Value="course.IsDigital" />
    </div>

    <div class="mb-3">
        <label for="isBestseller" class="form-label">Is Best seller</label>
        <InputCheckbox id="isBestseller" class="form-check-input" @bind-Value="course.IsBestseller" />
    </div>

    <div class="mb-3">
        <label for="categories" class="form-label">Categories</label>
        <InputText id="categories" class="form-control" @bind-Value="categoriesString" placeholder="Enter categories separated by commas with no space between" />
    </div>

    <div class="mb-3">
        <label for="ingress" class="form-label">Course Ingress</label>
        <InputText id="ingress" class="form-control" @bind-Value="course.Ingress" placeholder="Enter course ingress" />
    </div>

    <div class="mb-3">
        <label for="starRating" class="form-label">Star Rating</label>
        <InputNumber id="starRating" class="form-control" @bind-Value="course.StarRating" placeholder="Enter star rating" />
    </div>

    <div class="mb-3">
        <label for="reviews" class="form-label">Course Reviews</label>
        <InputText id="reviews" class="form-control" @bind-Value="course.Reviews" placeholder="Enter reviews" />
    </div>

    <div class="mb-3">
        <label for="likesInProcent" class="form-label">Course likes in procent</label>
        <InputText id="likesInProcent" class="form-control" @bind-Value="course.LikesInProcent" placeholder="Enter course likes in procent" />
    </div>

    <div class="mb-3">
        <label for="likes" class="form-label">Course likes</label>
        <InputText id="likes" class="form-control" @bind-Value="course.Likes" placeholder="Enter course likes" />
    </div>

    <div class="mb-3">
        <label for="hours" class="form-label">Course Hours</label>
        <InputText id="hours" class="form-control" @bind-Value="course.Hours" placeholder="Enter course hours" />
    </div>

    <div class="mb-3">
        <label for="authorName" class="form-label">Author Name</label>
        <input id="authorName" class="form-control" @bind="authorName" placeholder="Enter author name" />
    </div>

    <div class="mb-3">
        <label for="currency" class="form-label">Course Currency</label>
        <InputText id="currency" class="form-control" @bind-Value="course.Prices!.Currency" placeholder="Write the currency in symbols, such as $ or £" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Course Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="course.Prices!.Price" placeholder="Enter course price" />
    </div>

    <div class="mb-3">
        <label for="discountPrice" class="form-label">Course discount price</label>
        <InputNumber id="discountPrice" class="form-control" @bind-Value="course.Prices!.Discount" placeholder="Enter course discounted price" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Course Description</label>
        <InputText id="description" class="form-control" @bind-Value="course.Content!.Description" placeholder="Enter course description" />
    </div>

    <div class="mb-3">
        <label for="includes" class="form-label">Course Includes</label>
        <InputText id="includes" class="form-control" @bind-Value="includesString" placeholder="Enter includes separated by commas with no space between" />
    </div>

    <div class="mb-3">
        <label for="learn" class="form-label">Course Learn</label>
        <InputText id="learn" class="form-control" @bind-Value="learnString" placeholder="Enter learn separated by commas with no space between" />
    </div>

    <div class="mb-3">
        <label for="programDetailTitle" class="form-label">Program Detail Title</label>
        <InputText id="programDetailTitle" class="form-control" @bind-Value="programDetailTitle" placeholder="Enter program detail title" />
    </div>

    <div class="mb-3">
        <label for="programDetailDescription" class="form-label">Program Detail Description</label>
        <InputText id="programDetailDescription" class="form-control" @bind-Value="programDetailDescription" placeholder="Enter program detail description" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code {
    private Course course = new Course
    {
        Prices = new Prices(),
        Content = new Content()
    };
    private string? authorName;
    private string? includesString;
    private string? categoriesString;
    private string? learnString;
    private string[] categories = Array.Empty<string>();
    private string[] includes = Array.Empty<string>();

    private string? programDetailTitle;
    private string? programDetailDescription;
    private int programDetailCounter = 1;

    private string? ErrorMessage { get; set; }

    private string? SuccessMessage { get; set; }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(authorName))
            {
                if (course.Authors == null)
                {
                    course.Authors = new List<Author>();
                }
                course.Authors.Add(new Author { Name = authorName });
            }

            if (!string.IsNullOrWhiteSpace(categoriesString))
            {
                course.Categories = categoriesString.Split(',').Select(x => x.Trim()).ToArray();
            }

            if (!string.IsNullOrWhiteSpace(includesString))
            {
                course.Content!.Includes = includesString.Split(',').Select(x => x.Trim()).ToArray();
            }

            if (!string.IsNullOrWhiteSpace(learnString))
            {
                course.Content!.Learn = learnString.Split(',').Select(x => x.Trim()).ToArray();
            }

            if (!string.IsNullOrWhiteSpace(programDetailTitle) && !string.IsNullOrWhiteSpace(programDetailDescription))
            {
                if (course.Content?.ProgramDetails == null)
                {
                    course.Content!.ProgramDetails = new List<ProgramDetailItem>();
                }
                course.Content.ProgramDetails.Add(new ProgramDetailItem
                    {
                        Id = programDetailCounter++,
                        Title = programDetailTitle,
                        Description = programDetailDescription
                    });
            }

            var mutation = new
            {
                // måste skicka med id i queryn även om modellen inte har den. "The ID is requested in the response to know the generated ID of the new course"
                query = @"
                mutation CreateCourse($input: CourseCreateRequestInput!) {
                    createCourse(input: $input) {
                        id
                        title
                        imageUri
                        imageHeaderUri
                        isBestseller
                        isDigital
                        categories
                        ingress
                        starRating
                        reviews
                        likesInProcent
                        likes
                        hours
                        authors {
                            name
                        }
                        prices {
                            currency
                            price
                            discount
                        }
                        content {
                            description
                            includes
                            learn
                            programDetails {
                                id
                                title
                                description
                            }
                        }
                    }
                }",
                variables = new { input = course }
            };

            var response = await GraphQLService.CreateCourseAsync(mutation);
            if (response != null)
            {
                SuccessMessage = "Course created successfully.";
            }
            else
            {
                ErrorMessage = "An error occurred while creating the course.";
            }
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = $"HTTP Request Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}
