@page "/userdetails/{UserId}"
@using BackOffice.Data
@using Newtonsoft.Json
@using System.Text

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>User Details</PageTitle>

<h3>User Details</h3>

@if (user == null)
{
    <p>Loading...</p>
}
else
{
    <section id="account-details">
        <div class="details">
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div id="form-success" class="alert alert-success" role="alert">
                    @SuccessMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div id="form-error" class="alert alert-danger" role="alert">
                    @ErrorMessage
                </div>
            }
            <section class="basic-info">
                <EditForm method="post" Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" novalidate>
                    <DataAnnotationsValidator />

                    <div class="content">
                        <div id="form-firstname" class="input-group">
                            <label for="firstname" class="form-label">First name</label>
                            <input type="text" @bind="Input.FirstName" class="form-control" placeholder="Enter your first name." />
                            <ValidationMessage For="() => Input.FirstName" />
                        </div>

                        <div id="form-lastname" class="input-group">
                            <label for="lastname" class="form-label">Last name</label>
                            <input type="text" @bind="Input.LastName" class="form-control" placeholder="Enter your last name." />
                            <ValidationMessage For="() => Input.LastName" />
                        </div>

                        <div id="form-email" class="input-group">
                            <label for="email" class="form-label">Email</label>
                            <input type="text" @bind="Input.Email" class="form-control" placeholder="Enter your email." />
                            <ValidationMessage For="() => Input.Email" />
                        </div>

                        <div id="form-phone" class="input-group">
                            <label for="phone-number" class="form-label">Phone number</label>
                            <input @bind="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                            <ValidationMessage For="() => Input.PhoneNumber" />
                        </div>

                        <div id="form-bio" class="input-group">
                            <label for="bio" class="form-label">Biography</label>
                            <input type="text" @bind="Input.Biography" class="form-control" placeholder="Add a short bio..." />
                        </div>

                        <div id="form-addressline-1" class="input-group">
                            <label for="addressline_1" class="form-label">Address line 1</label>
                            <input type="text" @bind="Input.Address!.AddressLine_1" class="form-control" placeholder="Enter your address line" />
                            <ValidationMessage For="() => Input.Address!.AddressLine_1" />
                        </div>

                        <div id="form-addressline-2" class="input-group">
                            <label for="addressline_2" class="form-label">Address line 2</label>
                            <input type="text" @bind="Input.Address!.AddressLine_2" class="form-control" placeholder="Enter your second address line" />
                        </div>

                        <div id="form-postalcode" class="input-group">
                            <label for="postalcode" class="form-label">Postal code</label>
                            <input type="text" @bind="Input.Address!.PostalCode" class="form-control" placeholder="Enter your postal code" />
                            <ValidationMessage For="() => Input.Address!.PostalCode" />
                        </div>

                        <div id="form-city" class="input-group">
                            <label for="city" class="form-label">City</label>
                            <input type="text" @bind="Input.Address!.City" class="form-control" placeholder="Enter your city" />
                            <ValidationMessage For="() => Input.Address!.City" />
                        </div>

                        <div id="form-buttons">
                            <button class="btn-theme" type="submit">Save changes</button>
                        </div>
                    </div>
                </EditForm>
            </section>
        </div>
    </section>
}

@code {
    private UserInfoModel? user;

    [Parameter]
    public string? UserId { get; set; }

    private string? ErrorMessage { get; set; }

    private string? SuccessMessage { get; set; }

    [SupplyParameterFromForm]
    private UserInfoModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            try
            {
                user = await Http.GetFromJsonAsync<UserInfoModel>($"http://localhost:7081/api/GetUserById/{UserId}");
                if (user != null)
                {
                    Input = user;
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error fetching user data: {ex.Message}";
            }
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            // Send PUT request to update user information
            var response = await Http.PutAsync($"http://localhost:7081/api/UpdateUser/{UserId}", new StringContent(JsonConvert.SerializeObject(Input), Encoding.UTF8, "application/json"));
            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "User information updated successfully.";
            }
            else
            {
                ErrorMessage = "Failed to update user information.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error updating user information: {ex.Message}";
        }
    }
}
